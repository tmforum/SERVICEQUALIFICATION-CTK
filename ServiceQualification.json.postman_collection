{
	"id": "8e1c651a-2496-f1b9-a1f8-991de65f37d8",
	"name": "TMF ServiceQualification Management API",
	"description": "",
	"order": [
		"677094aa-1cc3-1dc1-fcde-da1568577186",
		"16d369e9-b8d5-0d13-0920-2976972b0d10",
		"d8ad8b38-cd79-fa86-d72f-dece365aae58",
		"9a523a45-7b7c-9c80-0448-7c5cc43fdedd",
		"2dc93626-f8ac-808a-eeda-8f083bdee8db",
		"3859548e-af13-549b-2313-cace98a058ef",
		"bb91270e-ca48-3134-62e7-3465d3f68e82",
		"24a24809-fdf6-62bf-b6f4-8d5283efca2f"
	],
	"folders": [],
	"timestamp": 1466058631021,
	"owner": 0,
	"remoteLink": "",
	"public": false,
	"requests": [
		{
			"id": "16d369e9-b8d5-0d13-0920-2976972b0d10",
			"headers": "Content-Type: application/json\nAccept: application/json\n",
			"url": "{{serviceQualificationManagementApi}}/serviceQualification",
			"preRequestScript": "postman.setEnvironmentVariable(\"testName\",  \"tmf-service-qualification-002\");",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "var dataOut = JSON.parse(responseBody);\n\ntests[\"Content-Type is present \" + postman.getResponseHeader(\"Content-type\")] = postman.getResponseHeader(\"Content-type\");\n\ntests[\"Status code is 201\"] = responseCode.code === 201;\n\ntests[\"Response contains ID \" + dataOut.id.toString()] = dataOut.id.toString() !== \"\";\n\ntests[\"Response contains HREF\" ] = dataOut.href.toString() !== \"\";\n\npostman.setGlobalVariable(\"ID2\", dataOut.id.toString());\n\npostman.setGlobalVariable(\"lastResponse\" + postman.getEnvironmentVariable(\"testName\"), dataOut);\npostman.setGlobalVariable(\"lastRequest\"+ postman.getEnvironmentVariable(\"testName\"), request.data );\n\nvar dataIn = JSON.parse(request.data);\n\n\nconsole.log(\"request \" + dataIn);\nconsole.log(\"request type\" + typeof(dataIn));\n\nif( typeof(dataOut.serviceQualificationItem) !== 'undefined' && dataOut.serviceQualificationItem.length > 0) {\n    var items = dataOut.serviceQualificationItem;\n    for(var i = 0; i < items.length; i++) {\n        tests[\"Response contains service \"] = typeof(items[i].service) !== 'undefined';\n        validateService(items[i].service);\n        \n        tests[\"Response serviceQualificationItem contains availability\"+ items[i].availability.toString()] = items[i].availability.toString() !== \"\";\n        tests[\"Response serviceQualificationItem contains serviceabilityDate \"+ items[i].serviceabilityDate.toString()] = items[i].serviceabilityDate.toString() !== \"\";\n        validate(dataIn.serviceQualificationItem[0].service, items[i].service);\n    }\n}\n\nfunction validateService(service) {\n    if(\"No\" === dataIn.provideAlternative) {\n        tests[\"Response service contains serviceCharacteristic \"] = typeof(service.serviceCharacteristic) !== 'undefined';\n        validateServiceCharacteristic(service.serviceCharacteristic);\n    }\n    \n    tests[\"Response service contains serviceSpecification \"] = typeof(service.serviceSpecification) !== 'undefined';\n    validateServiceSpecification(service.serviceSpecification);\n    \n  \n}\n\nfunction validateServiceCharacteristic(serviceCharacteristic) {\n    for(var i = 0; i < serviceCharacteristic.length; i++ ) {\n        tests[\"Response serviceCharacteristic contains name \"+ serviceCharacteristic[i].name] = true;\n        tests[\"Response serviceCharacteristic contains value \"+ serviceCharacteristic[i].value] = true;\n    }\n   \n}\n\nfunction validateServiceSpecification(serviceSpecification) {\n    tests[\"Response serviceSpecification contains id \"+ serviceSpecification.id.toString()] =serviceSpecification.id.toString() !== \"\";\n    tests[\"Response serviceSpecification contains href \"+ serviceSpecification.href.toString()] = serviceSpecification.href.toString() !== \"\";\n    tests[\"Response serviceSpecification contains serviceCategoryId \"+ serviceSpecification.serviceCategoryId.toString()] = serviceSpecification.serviceCategoryId.toString() !== \"\";\n}\n\n\ntests[\"POST Body Response provideAlternative equals Request provideAlternative\"  ] = objectEquals(dataIn.provideAlternative, dataOut.provideAlternative);\ntests[\"POST Body Response provideOnlyEligible equals Request provideOnlyEligible\"  ] = objectEquals(dataIn.provideOnlyEligible, dataOut.provideOnlyEligible);\ntests[\"POST Body Response Address equals Request Address\"  ] = objectEquals(dataIn.address, dataOut.address);\ntests[\"Response contains eligibilityDate \" + dataOut.eligibilityDate.toString()] = dataOut.eligibilityDate.toString() !== \"\";\n\n\nfunction validate(inService, outService) {\n        \n    tests[\"POST Body Response serviceSpecification equals Request serviceSpecification\"  ] = objectEquals(inService.serviceCharacteristic, outService.serviceCharacteristic);\n    \n    if( typeof(dataIn.provideAlternative && inService.serviceSpecification) !== 'undefined' ) {\n        tests[\"POST Body Response serviceSpecification equals Request serviceSpecification\"  ] = objectEquals(inService.serviceSpecification, outService.serviceSpecification);\n        \n        if(\"No\" === dataIn.provideAlternative && inService.serviceSpecification.serviceCategoryId === \"internetService\") {\n            tests[\"Serivce qualification\"] = internetServiceQualification(inService.serviceCharacteristic, outService.serviceSpecification.serviceSpecificationCharacteristic);\n        }\n    }\n\n}\n\nfunction internetServiceQualification(inAttrs, outAttrs) {\n    // tests[\"inAttrs: \" + JSON.stringify(inAttrs)] = true;\n    \n    // tests[\" outAttrs: \" + JSON.stringify(outAttrs) ] = true;\n    \n    // tests[\"dataIn.provideAlternative: \" + dataIn.provideAlternative] = true;\n    \n    if( dataIn.provideAlternative === \"No\") {\n        \n        for(var i = 0; i < inAttrs.length; i++) {\n            for(var j = 0; j < outAttrs.length; j++) {\n                if(inAttrs[i].name == outAttrs[j].name) {\n                    \n                    // tests[\"inAttrs: \" + JSON.stringify(inAttrs[i])] = true;\n                    // tests[\"outAttrs: \" + JSON.stringify(outAttrs[j])] = true;\n\n                    retIn  = convertDataUnit(inAttrs[i].value);\n                    retOut = convertDataUnit(outAttrs[j].valueto);\n                    \n                    // tests[\"retIn: \" + JSON.stringify(retIn)] = true;\n                    // tests[\"retOut: \" + JSON.stringify(retOut)] = true;\n                    \n                    if(retIn.value <= retOut.value) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n    return true;\n}\n\nfunction convertDataUnit(dataStr) {\n    // tests[\"dataStr:\" + dataStr] = true;\n    var data = {};\n    data.unit = \"KBPS\";\n    \n    unit = dataStr.substr(-4, 4);\n    value = dataStr.substr(0, dataStr.length-4);\n    //tests[\"unit: \" + unit.toString() + \",value:\" + value.toString() + \",data:\" + dataStr.toString()] = true;\n    if(unit.substr(0,1) === \"K\") {\n        data.value = parseInt(value);\n    } else if(unit.substr(0,1) === \"M\") {\n        data.value = parseInt(value) * 1000;\n    } else if(unit.substr(0,1) === \"G\") {\n        data.value = parseInt(value) * 1000 * 1000;\n    }\n    return data;\n}\n\n\nfunction objectEquals(v1, v2) {\n\n    if (typeof(v1) !== typeof(v2)) {\n         console.log(\"property typeof(v1) !==typeof(v2)\" + typeof(v1)  + typeof(v2) + \"==>\" + v1 + \"!=\" + v2);\n        return false;\n    }\n\n    if (typeof(v1) === \"function\") {\n        return v1.toString() === v2.toString();\n    }\n\n    if (v1 instanceof Object && v2 instanceof Object) {\n       \n        var r = true;\n        for (var k in v1) {\n            r = objectEquals(v1[k], v2[k]);\n            \n            if (!r) {\n                 tests[\"property \" + k.toString() + \"==>\" + v1[k] + \"!=\" + v2[k]] = false;\n                 console.log(\"property \" + k.toString() + \"==>\" + v1[k] + \"!=\" + v2[k]);\n                 postman.setGlobalVariable(\"unequal\" +  k.toString(), v1[k] + \"!=\" + v2[k]);\n                \n                return false;\n            } else {\n                 //tests[\"property \" + k.toString() + \"==>\" + v1[k] + \"=\" + v2[k]] = true;\n            }\n        }\n        return true;\n    } else {\n        return v1 === v2;\n    }\n}\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1467782163060,
			"name": "create a service qualification request - case 2",
			"description": "can the access NW be provided at a specific location",
			"collectionId": "8e1c651a-2496-f1b9-a1f8-991de65f37d8",
			"responses": [],
			"rawModeData": "{\n    \"address\" : \n    {\n         \"href\" : \"https://www.google.ca/maps/dir/google+map+montreal+place+ville+marie\"\n     },\n     \"provideAlternative\" : \"Yes\",\n     \"provideOnlyEligible\" : \"Yes\",\n     \"description\" : \"example of a qualification task\",\n     \"serviceQualificationItem\" : \n     [\n        {\n            \"service\" : {\n                \"serviceCharacteristic\" : [{\n                    \"name\" : \"upstreamSpeed\",\n                    \"value\" : \"50MBPS\"\n                }],\n                \"serviceSpecification\" : {\n                    \"id\" : \"ADSL\",\n                    \"href\" : \"https://serviceSpecification/ADSL\",\n                    \"serviceCategoryId\" : \"internetService\"\n                }\n            }\n        }\n     ]\n}\n"
		},
		{
			"id": "24a24809-fdf6-62bf-b6f4-8d5283efca2f",
			"headers": "Content-Type: application/json\nAccept: application/json\n",
			"url": "{{serviceQualificationManagementApi}}/productOfferingQualification/{{ID4}}",
			"preRequestScript": "postman.setEnvironmentVariable(\"testName\",  \"tmf-product-offering-qualification-002\");",
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "var dataOut = JSON.parse(responseBody);\n\ntests[\"Content-Type is present \" + postman.getResponseHeader(\"Content-type\")] = postman.getResponseHeader(\"Content-type\");\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\ntests[\"Response contains ID \" + dataOut.id.toString()] = dataOut.id.toString() !== \"\";\n\ntests[\"Response contains HREF\" ] = dataOut.href.toString() !== \"\";\n\npostman.setGlobalVariable(\"ID\", dataOut.id.toString());\n\npostman.setGlobalVariable(\"lastResponse\" + postman.getEnvironmentVariable(\"testName\"), dataOut);\npostman.setGlobalVariable(\"lastRequest\"+ postman.getEnvironmentVariable(\"testName\"), request.data );\n\n\nconsole.log(\"request \" + request);\n\n\ntests[\"Response contains eligibilityDate \" + dataOut.eligibilityDate.toString()] = dataOut.eligibilityDate.toString() !== \"\";\ntests[\"Response contains qualificationState \" + dataOut.qualificationState.toString()] = dataOut.qualificationState.toString() !== \"\";\n\nif( typeof(dataOut.productOfferingQualificationItem) !== 'undefined' && dataOut.productOfferingQualificationItem.length > 0) {\n    var items = dataOut.productOfferingQualificationItem;\n    for(var i = 0; i < items.length; i++) {\n        tests[\"Response contains productOffering \"] = typeof(items[i].productOffering) !== 'undefined';\n        validateProductOffering(items[i].productOffering);\n    }\n}\n\nfunction validateProductOffering(productOffering) {\n    tests[\"productOffering contains id\"+ productOffering.id.toString()] = productOffering.id.toString() !== \"\";\n    tests[\"productOffering contains href\"+ productOffering.href.toString()] = productOffering.href.toString() !== \"\";\n    tests[\"productOffering contains category \"] = typeof(productOffering.productOfferingCategory) !== 'undefined';\n    tests[\"productOffering contains product \"] = typeof(productOffering.product) !== 'undefined';\n    validateProduct(productOffering.product);\n}\n\nfunction validateProduct(product) {\n    tests[\"product contains productSpecification \"] = typeof(product.productSpecification) !== 'undefined';   \n    tests[\"productSpecification contains id\"+ product.productSpecification.id.toString()] = product.productSpecification.id.toString() !== \"\";\n    tests[\"productSpecification contains version\"+ product.productSpecification.version.toString()] = product.productSpecification.version.toString() !== \"\";\n    tests[\"productSpecification contains name\"+ product.productSpecification.name.toString()] = product.productSpecification.name.toString() !== \"\";\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1467781845810,
			"name": "find specified product offering qualification request",
			"description": "",
			"collectionId": "8e1c651a-2496-f1b9-a1f8-991de65f37d8",
			"responses": []
		},
		{
			"id": "2dc93626-f8ac-808a-eeda-8f083bdee8db",
			"headers": "Content-Type: application/json\nAccept: application/json\n",
			"url": "{{serviceQualificationManagementApi}}/serviceQualification/{{ID2}}",
			"preRequestScript": "postman.setEnvironmentVariable(\"testName\",  \"tmf-service-qualification-004\");",
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "var dataOut = JSON.parse(responseBody);\n\n\nvar lastRequest = globals[\"lastRequest\"+postman.getEnvironmentVariable(\"testName\")];\n\nvar lastResponse= globals[\"lastResponse\"+postman.getEnvironmentVariable(\"testName\")];\n\ntests[\"Content-Type is present \" + postman.getResponseHeader(\"Content-type\")] = postman.getResponseHeader(\"Content-type\");\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\ntests[\"Response contains ID \" + dataOut.id.toString()] = dataOut.id.toString() !== \"\";\n\ntests[\"Response contains HREF\" ] = dataOut.href.toString() !== \"\";\n\nconsole.log(\"request \" + request);\n\nif( typeof(dataOut.serviceQualificationItem) !== 'undefined' && dataOut.serviceQualificationItem.length > 0) {\n    var items = dataOut.serviceQualificationItem;\n    for(var i = 0; i < items.length; i++) {\n        tests[\"Response contains service \"] = typeof(items[i].service) !== 'undefined';\n        validateService(items[i].service);\n        \n        tests[\"Response serviceQualificationItem contains availability\"+ items[i].availability.toString()] = items[i].availability.toString() !== \"\";\n        tests[\"Response serviceQualificationItem contains serviceabilityDate\"+ items[i].serviceabilityDate.toString()] = items[i].serviceabilityDate.toString() !== \"\";\n        validate(items[i].service);\n    }\n}\n\nfunction validateService(service) {\n    if(\"No\" === dataOut.provideAlternative) {\n        tests[\"Response service contains serviceCharacteristic \"] = typeof(service.serviceCharacteristic) !== 'undefined';\n        validateServiceCharacteristic(service.serviceCharacteristic);\n    }\n    \n    tests[\"Response service contains serviceSpecification \"] = typeof(service.serviceSpecification) !== 'undefined';\n    validateServiceSpecification(service.serviceSpecification);\n    \n  \n}\n\nfunction validateServiceCharacteristic(serviceCharacteristic) {\n    for(var i = 0; i < serviceCharacteristic.length; i++ ) {\n        tests[\"Response serviceCharacteristic contains name \"+ serviceCharacteristic[i].name] = true;\n        tests[\"Response serviceCharacteristic contains value \"+ serviceCharacteristic[i].value] = true;\n    }\n   \n}\n\nfunction validateServiceSpecification(serviceSpecification) {\n    tests[\"Response serviceSpecification contains id \"+ serviceSpecification.id.toString()] =serviceSpecification.id.toString() !== \"\";\n    tests[\"Response serviceSpecification contains href \"+ serviceSpecification.href.toString()] = serviceSpecification.href.toString() !== \"\";\n    tests[\"Response serviceSpecification contains serviceCategoryId \"+ serviceSpecification.serviceCategoryId.toString()] = serviceSpecification.serviceCategoryId.toString() !== \"\";\n}\n\ntests[\"Response contains eligibilityDate \" + dataOut.eligibilityDate.toString()] = dataOut.eligibilityDate.toString() !== \"\";\n\n\nfunction validate(outService) {\n    \n    if( typeof(dataOut.provideAlternative) !== 'undefined' ) {\n        \n        if(\"No\" === dataOut.provideAlternative && outService.serviceSpecification.serviceCategoryId === \"internetService\") {\n            tests[\"Serivce qualification\"] = internetServiceQualification(outService.serviceCharacteristic, outService.serviceSpecification.serviceSpecificationCharacteristic);\n        }\n    }\n\n}\n\nfunction internetServiceQualification(inAttrs, outAttrs) {\n    \n    for(var i = 0; i < inAttrs.length; i++) {\n        for(var j = 0; j < outAttrs.length; j++) {\n            if(inAttrs[i].name == outAttrs[j].name) {\n                \n                // tests[\"inAttrs: \" + JSON.stringify(inAttrs[i])] = true;\n                // tests[\"outAttrs: \" + JSON.stringify(outAttrs[j])] = true;\n\n                retIn  = convertDataUnit(inAttrs[i].value);\n                retOut = convertDataUnit(outAttrs[j].valueto);\n                \n                // tests[\"retIn: \" + JSON.stringify(retIn)] = true;\n                // tests[\"retOut: \" + JSON.stringify(retOut)] = true;\n                \n                if(retIn.value <= retOut.value) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n \n}\n\nfunction convertDataUnit(dataStr) {\n    // tests[\"dataStr:\" + dataStr] = true;\n    var data = {};\n    data.unit = \"KBPS\";\n    \n    unit = dataStr.substr(-4, 4);\n    value = dataStr.substr(0, dataStr.length-4);\n    //tests[\"unit: \" + unit.toString() + \",value:\" + value.toString() + \",data:\" + dataStr.toString()] = true;\n    if(unit.substr(0,1) === \"K\") {\n        data.value = parseInt(value);\n    } else if(unit.substr(0,1) === \"M\") {\n        data.value = parseInt(value) * 1000;\n    } else if(unit.substr(0,1) === \"G\") {\n        data.value = parseInt(value) * 1000 * 1000;\n    }\n    return data;\n}\n\n\nfunction objectEquals(v1, v2) {\n\n    if (typeof(v1) !== typeof(v2)) {\n         console.log(\"property typeof(v1) !==typeof(v2)\" + typeof(v1)  + typeof(v2) + \"==>\" + v1 + \"!=\" + v2);\n        return false;\n    }\n\n    if (typeof(v1) === \"function\") {\n        return v1.toString() === v2.toString();\n    }\n\n    if (v1 instanceof Object && v2 instanceof Object) {\n       \n        var r = true;\n        for (var k in v1) {\n            r = objectEquals(v1[k], v2[k]);\n            \n            if (!r) {\n                 tests[\"property \" + k.toString() + \"==>\" + v1[k] + \"!=\" + v2[k]] = false;\n                 console.log(\"property \" + k.toString() + \"==>\" + v1[k] + \"!=\" + v2[k]);\n                 postman.setGlobalVariable(\"unequal\" +  k.toString(), v1[k] + \"!=\" + v2[k]);\n                \n                return false;\n            } else {\n                 //tests[\"property \" + k.toString() + \"==>\" + v1[k] + \"=\" + v2[k]] = true;\n            }\n        }\n        return true;\n    } else {\n        return v1 === v2;\n    }\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1467781822098,
			"name": "find specified service qualification requests - case 2",
			"description": "",
			"collectionId": "8e1c651a-2496-f1b9-a1f8-991de65f37d8",
			"responses": []
		},
		{
			"id": "3859548e-af13-549b-2313-cace98a058ef",
			"headers": "Content-Type: application/json\nAccept: application/json\n",
			"url": "{{serviceQualificationManagementApi}}/serviceQualification/{{ID3}}",
			"preRequestScript": "postman.setEnvironmentVariable(\"testName\",  \"tmf-service-qualification-004\");",
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "var dataOut = JSON.parse(responseBody);\n\n\nvar lastRequest = globals[\"lastRequest\"+postman.getEnvironmentVariable(\"testName\")];\n\nvar lastResponse= globals[\"lastResponse\"+postman.getEnvironmentVariable(\"testName\")];\n\ntests[\"Content-Type is present \" + postman.getResponseHeader(\"Content-type\")] = postman.getResponseHeader(\"Content-type\");\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\ntests[\"Response contains ID \" + dataOut.id.toString()] = dataOut.id.toString() !== \"\";\n\ntests[\"Response contains HREF\" ] = dataOut.href.toString() !== \"\";\n\nconsole.log(\"request \" + request);\n\nif( typeof(dataOut.serviceQualificationItem) !== 'undefined' && dataOut.serviceQualificationItem.length > 0) {\n    var items = dataOut.serviceQualificationItem;\n    for(var i = 0; i < items.length; i++) {\n        tests[\"Response contains service \"] = typeof(items[i].service) !== 'undefined';\n        validateService(items[i].service);\n        \n        tests[\"Response serviceQualificationItem contains availability\"+ items[i].availability.toString()] = items[i].availability.toString() !== \"\";\n        tests[\"Response serviceQualificationItem contains serviceabilityDate\"+ items[i].serviceabilityDate.toString()] = items[i].serviceabilityDate.toString() !== \"\";\n        validate(items[i].service);\n    }\n}\n\nfunction validateService(service) {\n    if(\"No\" === dataOut.provideAlternative) {\n        tests[\"Response service contains serviceCharacteristic \"] = typeof(service.serviceCharacteristic) !== 'undefined';\n        validateServiceCharacteristic(service.serviceCharacteristic);\n    }\n    \n    tests[\"Response service contains serviceSpecification \"] = typeof(service.serviceSpecification) !== 'undefined';\n    validateServiceSpecification(service.serviceSpecification);\n    \n  \n}\n\nfunction validateServiceCharacteristic(serviceCharacteristic) {\n    for(var i = 0; i < serviceCharacteristic.length; i++ ) {\n        tests[\"Response serviceCharacteristic contains name \"+ serviceCharacteristic[i].name] = true;\n        tests[\"Response serviceCharacteristic contains value \"+ serviceCharacteristic[i].value] = true;\n    }\n   \n}\n\nfunction validateServiceSpecification(serviceSpecification) {\n    tests[\"Response serviceSpecification contains id \"+ serviceSpecification.id.toString()] =serviceSpecification.id.toString() !== \"\";\n    tests[\"Response serviceSpecification contains href \"+ serviceSpecification.href.toString()] = serviceSpecification.href.toString() !== \"\";\n    tests[\"Response serviceSpecification contains serviceCategoryId \"+ serviceSpecification.serviceCategoryId.toString()] = serviceSpecification.serviceCategoryId.toString() !== \"\";\n}\n\ntests[\"Response contains eligibilityDate \" + dataOut.eligibilityDate.toString()] = dataOut.eligibilityDate.toString() !== \"\";\n\n\nfunction validate(outService) {\n    \n    if( typeof(dataOut.provideAlternative) !== 'undefined' ) {\n        \n        if(\"No\" === dataOut.provideAlternative && outService.serviceSpecification.serviceCategoryId === \"internetService\") {\n            tests[\"Serivce qualification\"] = internetServiceQualification(outService.serviceCharacteristic, outService.serviceSpecification.serviceSpecificationCharacteristic);\n        }\n    }\n\n}\n\nfunction internetServiceQualification(inAttrs, outAttrs) {\n    \n    for(var i = 0; i < inAttrs.length; i++) {\n        for(var j = 0; j < outAttrs.length; j++) {\n            if(inAttrs[i].name == outAttrs[j].name) {\n                \n                // tests[\"inAttrs: \" + JSON.stringify(inAttrs[i])] = true;\n                // tests[\"outAttrs: \" + JSON.stringify(outAttrs[j])] = true;\n\n                retIn  = convertDataUnit(inAttrs[i].value);\n                retOut = convertDataUnit(outAttrs[j].valueto);\n                \n                // tests[\"retIn: \" + JSON.stringify(retIn)] = true;\n                // tests[\"retOut: \" + JSON.stringify(retOut)] = true;\n                \n                if(retIn.value <= retOut.value) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n \n}\n\nfunction convertDataUnit(dataStr) {\n    // tests[\"dataStr:\" + dataStr] = true;\n    var data = {};\n    data.unit = \"KBPS\";\n    \n    unit = dataStr.substr(-4, 4);\n    value = dataStr.substr(0, dataStr.length-4);\n    //tests[\"unit: \" + unit.toString() + \",value:\" + value.toString() + \",data:\" + dataStr.toString()] = true;\n    if(unit.substr(0,1) === \"K\") {\n        data.value = parseInt(value);\n    } else if(unit.substr(0,1) === \"M\") {\n        data.value = parseInt(value) * 1000;\n    } else if(unit.substr(0,1) === \"G\") {\n        data.value = parseInt(value) * 1000 * 1000;\n    }\n    return data;\n}\n\n\nfunction objectEquals(v1, v2) {\n\n    if (typeof(v1) !== typeof(v2)) {\n         console.log(\"property typeof(v1) !==typeof(v2)\" + typeof(v1)  + typeof(v2) + \"==>\" + v1 + \"!=\" + v2);\n        return false;\n    }\n\n    if (typeof(v1) === \"function\") {\n        return v1.toString() === v2.toString();\n    }\n\n    if (v1 instanceof Object && v2 instanceof Object) {\n       \n        var r = true;\n        for (var k in v1) {\n            r = objectEquals(v1[k], v2[k]);\n            \n            if (!r) {\n                 tests[\"property \" + k.toString() + \"==>\" + v1[k] + \"!=\" + v2[k]] = false;\n                 console.log(\"property \" + k.toString() + \"==>\" + v1[k] + \"!=\" + v2[k]);\n                 postman.setGlobalVariable(\"unequal\" +  k.toString(), v1[k] + \"!=\" + v2[k]);\n                \n                return false;\n            } else {\n                 //tests[\"property \" + k.toString() + \"==>\" + v1[k] + \"=\" + v2[k]] = true;\n            }\n        }\n        return true;\n    } else {\n        return v1 === v2;\n    }\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1467781830921,
			"name": "find specified service qualification requests - case 3",
			"description": "",
			"collectionId": "8e1c651a-2496-f1b9-a1f8-991de65f37d8",
			"responses": []
		},
		{
			"id": "677094aa-1cc3-1dc1-fcde-da1568577186",
			"headers": "Content-Type: application/json\nAccept: application/json\n",
			"url": "{{serviceQualificationManagementApi}}/serviceQualification",
			"preRequestScript": "postman.setEnvironmentVariable(\"testName\",  \"tmf-service-qualification-001\");",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "var dataOut = JSON.parse(responseBody);\n\ntests[\"Content-Type is present \" + postman.getResponseHeader(\"Content-type\")] = postman.getResponseHeader(\"Content-type\");\n\ntests[\"Status code is 201\"] = responseCode.code === 201;\n\ntests[\"Response contains ID \" + dataOut.id.toString()] = dataOut.id.toString() !== \"\";\n\ntests[\"Response contains HREF\" ] = dataOut.href.toString() !== \"\";\n\npostman.setGlobalVariable(\"ID1\", dataOut.id.toString());\n\npostman.setGlobalVariable(\"lastResponse\" + postman.getEnvironmentVariable(\"testName\"), dataOut);\npostman.setGlobalVariable(\"lastRequest\"+ postman.getEnvironmentVariable(\"testName\"), request.data );\n\nvar dataIn = JSON.parse(request.data);\n\n\nconsole.log(\"request \" + dataIn);\nconsole.log(\"request type\" + typeof(dataIn));\n\nif( typeof(dataOut.serviceQualificationItem) !== 'undefined' && dataOut.serviceQualificationItem.length > 0) {\n    var items = dataOut.serviceQualificationItem;\n    for(var i = 0; i < items.length; i++) {\n        tests[\"Response contains service \"] = typeof(items[i].service) !== 'undefined';\n        validateService(items[i].service);\n        \n        tests[\"Response serviceQualificationItem contains availability\"+ items[i].availability.toString()] = items[i].availability.toString() !== \"\";\n        tests[\"Response serviceQualificationItem contains serviceabilityDate \"+ items[i].serviceabilityDate.toString()] = items[i].serviceabilityDate.toString() !== \"\";\n        validate(dataIn.serviceQualificationItem[0].service, items[i].service);\n    }\n}\n\nfunction validateService(service) {\n    if(\"No\" === dataIn.provideAlternative) {\n        tests[\"Response service contains serviceCharacteristic \"] = typeof(service.serviceCharacteristic) !== 'undefined';\n        validateServiceCharacteristic(service.serviceCharacteristic);\n    }\n    \n    tests[\"Response service contains serviceSpecification \"] = typeof(service.serviceSpecification) !== 'undefined';\n    validateServiceSpecification(service.serviceSpecification);\n    \n  \n}\n\nfunction validateServiceCharacteristic(serviceCharacteristic) {\n    for(var i = 0; i < serviceCharacteristic.length; i++ ) {\n        tests[\"Response serviceCharacteristic contains name \"+ serviceCharacteristic[i].name] = true;\n        tests[\"Response serviceCharacteristic contains value \"+ serviceCharacteristic[i].value] = true;\n    }\n   \n}\n\nfunction validateServiceSpecification(serviceSpecification) {\n    tests[\"Response serviceSpecification contains id \"+ serviceSpecification.id.toString()] =serviceSpecification.id.toString() !== \"\";\n    tests[\"Response serviceSpecification contains href \"+ serviceSpecification.href.toString()] = serviceSpecification.href.toString() !== \"\";\n    tests[\"Response serviceSpecification contains serviceCategoryId \"+ serviceSpecification.serviceCategoryId.toString()] = serviceSpecification.serviceCategoryId.toString() !== \"\";\n}\n\n\ntests[\"POST Body Response provideAlternative equals Request provideAlternative\"  ] = objectEquals(dataIn.provideAlternative, dataOut.provideAlternative);\ntests[\"POST Body Response provideOnlyEligible equals Request provideOnlyEligible\"  ] = objectEquals(dataIn.provideOnlyEligible, dataOut.provideOnlyEligible);\ntests[\"POST Body Response Address equals Request Address\"  ] = objectEquals(dataIn.address, dataOut.address);\ntests[\"Response contains eligibilityDate \" + dataOut.eligibilityDate.toString()] = dataOut.eligibilityDate.toString() !== \"\";\n\n\nfunction validate(inService, outService) {\n        \n    tests[\"POST Body Response serviceSpecification equals Request serviceSpecification\"  ] = objectEquals(inService.serviceCharacteristic, outService.serviceCharacteristic);\n    \n    if( typeof(dataIn.provideAlternative && inService.serviceSpecification) !== 'undefined' ) {\n        tests[\"POST Body Response serviceSpecification equals Request serviceSpecification\"  ] = objectEquals(inService.serviceSpecification, outService.serviceSpecification);\n        \n        if(\"No\" === dataIn.provideAlternative && inService.serviceSpecification.serviceCategoryId === \"internetService\") {\n            tests[\"Serivce qualification\"] = internetServiceQualification(inService.serviceCharacteristic, outService.serviceSpecification.serviceSpecificationCharacteristic);\n        }\n    }\n\n}\n\nfunction internetServiceQualification(inAttrs, outAttrs) {\n    // tests[\"inAttrs: \" + JSON.stringify(inAttrs)] = true;\n    \n    // tests[\" outAttrs: \" + JSON.stringify(outAttrs) ] = true;\n    \n    // tests[\"dataIn.provideAlternative: \" + dataIn.provideAlternative] = true;\n    \n    if( dataIn.provideAlternative === \"No\") {\n        \n        for(var i = 0; i < inAttrs.length; i++) {\n            for(var j = 0; j < outAttrs.length; j++) {\n                if(inAttrs[i].name == outAttrs[j].name) {\n                    \n                    // tests[\"inAttrs: \" + JSON.stringify(inAttrs[i])] = true;\n                    // tests[\"outAttrs: \" + JSON.stringify(outAttrs[j])] = true;\n\n                    retIn  = convertDataUnit(inAttrs[i].value);\n                    retOut = convertDataUnit(outAttrs[j].valueto);\n                    \n                    // tests[\"retIn: \" + JSON.stringify(retIn)] = true;\n                    // tests[\"retOut: \" + JSON.stringify(retOut)] = true;\n                    \n                    if(retIn.value <= retOut.value) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n    return true;\n}\n\nfunction convertDataUnit(dataStr) {\n    // tests[\"dataStr:\" + dataStr] = true;\n    var data = {};\n    data.unit = \"KBPS\";\n    \n    unit = dataStr.substr(-4, 4);\n    value = dataStr.substr(0, dataStr.length-4);\n    //tests[\"unit: \" + unit.toString() + \",value:\" + value.toString() + \",data:\" + dataStr.toString()] = true;\n    if(unit.substr(0,1) === \"K\") {\n        data.value = parseInt(value);\n    } else if(unit.substr(0,1) === \"M\") {\n        data.value = parseInt(value) * 1000;\n    } else if(unit.substr(0,1) === \"G\") {\n        data.value = parseInt(value) * 1000 * 1000;\n    }\n    return data;\n}\n\n\nfunction objectEquals(v1, v2) {\n\n    if (typeof(v1) !== typeof(v2)) {\n         console.log(\"property typeof(v1) !==typeof(v2)\" + typeof(v1)  + typeof(v2) + \"==>\" + v1 + \"!=\" + v2);\n        return false;\n    }\n\n    if (typeof(v1) === \"function\") {\n        return v1.toString() === v2.toString();\n    }\n\n    if (v1 instanceof Object && v2 instanceof Object) {\n       \n        var r = true;\n        for (var k in v1) {\n            r = objectEquals(v1[k], v2[k]);\n            \n            if (!r) {\n                 tests[\"property \" + k.toString() + \"==>\" + v1[k] + \"!=\" + v2[k]] = false;\n                 console.log(\"property \" + k.toString() + \"==>\" + v1[k] + \"!=\" + v2[k]);\n                 postman.setGlobalVariable(\"unequal\" +  k.toString(), v1[k] + \"!=\" + v2[k]);\n                \n                return false;\n            } else {\n                 //tests[\"property \" + k.toString() + \"==>\" + v1[k] + \"=\" + v2[k]] = true;\n            }\n        }\n        return true;\n    } else {\n        return v1 === v2;\n    }\n}\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1467782156329,
			"name": "create a service qualification request - case 1",
			"description": "Can a service  be provided at a specific location with the specified characteristics?",
			"collectionId": "8e1c651a-2496-f1b9-a1f8-991de65f37d8",
			"responses": [],
			"rawModeData": "{\n    \"address\" : \n    {\n         \"href\" : \"https://www.google.ca/maps/dir/google+map+montreal+place+ville+marie\"\n     },\n     \"provideAlternative\" : \"No\",\n     \"provideOnlyEligible\" : \"Yes\",\n     \"description\" : \"example of a qualification task\",\n     \"serviceQualificationItem\" : \n     [\n        {\n            \"service\" : {\n                \"serviceCharacteristic\" : [{\n                    \"name\" : \"upstreamSpeed\",\n                    \"value\" : \"1MBPS\"\n                }],\n                \"serviceSpecification\" : {\n                    \"id\" : \"ADSL\",\n                    \"href\" : \"http://localhost:8080/DSServiceSpecficationManagement/api/serviceSepcification/v1/ADSL\",\n                    \"serviceCategoryId\" : \"internetService\"\n                }\n            }\n        }\n     ]\n}\n"
		},
		{
			"id": "9a523a45-7b7c-9c80-0448-7c5cc43fdedd",
			"headers": "Content-Type: application/json\nAccept: application/json\n",
			"url": "{{serviceQualificationManagementApi}}/serviceQualification/{{ID1}}",
			"preRequestScript": "postman.setEnvironmentVariable(\"testName\",  \"tmf-service-qualification-004\");",
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "var dataOut = JSON.parse(responseBody);\n\n\nvar lastRequest = globals[\"lastRequest\"+postman.getEnvironmentVariable(\"testName\")];\n\nvar lastResponse= globals[\"lastResponse\"+postman.getEnvironmentVariable(\"testName\")];\n\ntests[\"Content-Type is present \" + postman.getResponseHeader(\"Content-type\")] = postman.getResponseHeader(\"Content-type\");\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\ntests[\"Response contains ID \" + dataOut.id.toString()] = dataOut.id.toString() !== \"\";\n\ntests[\"Response contains HREF\" ] = dataOut.href.toString() !== \"\";\n\nconsole.log(\"request \" + request);\n\nif( typeof(dataOut.serviceQualificationItem) !== 'undefined' && dataOut.serviceQualificationItem.length > 0) {\n    var items = dataOut.serviceQualificationItem;\n    for(var i = 0; i < items.length; i++) {\n        tests[\"Response contains service \"] = typeof(items[i].service) !== 'undefined';\n        validateService(items[i].service);\n        \n        tests[\"Response serviceQualificationItem contains availability\"+ items[i].availability.toString()] = items[i].availability.toString() !== \"\";\n        tests[\"Response serviceQualificationItem contains serviceabilityDate\"+ items[i].serviceabilityDate.toString()] = items[i].serviceabilityDate.toString() !== \"\";\n        validate(items[i].service);\n    }\n}\n\nfunction validateService(service) {\n    if(\"No\" === dataOut.provideAlternative) {\n        tests[\"Response service contains serviceCharacteristic \"] = typeof(service.serviceCharacteristic) !== 'undefined';\n        validateServiceCharacteristic(service.serviceCharacteristic);\n    }\n    \n    tests[\"Response service contains serviceSpecification \"] = typeof(service.serviceSpecification) !== 'undefined';\n    validateServiceSpecification(service.serviceSpecification);\n    \n  \n}\n\nfunction validateServiceCharacteristic(serviceCharacteristic) {\n    for(var i = 0; i < serviceCharacteristic.length; i++ ) {\n        tests[\"Response serviceCharacteristic contains name \"+ serviceCharacteristic[i].name] = true;\n        tests[\"Response serviceCharacteristic contains value \"+ serviceCharacteristic[i].value] = true;\n    }\n   \n}\n\nfunction validateServiceSpecification(serviceSpecification) {\n    tests[\"Response serviceSpecification contains id \"+ serviceSpecification.id.toString()] =serviceSpecification.id.toString() !== \"\";\n    tests[\"Response serviceSpecification contains href \"+ serviceSpecification.href.toString()] = serviceSpecification.href.toString() !== \"\";\n    tests[\"Response serviceSpecification contains serviceCategoryId \"+ serviceSpecification.serviceCategoryId.toString()] = serviceSpecification.serviceCategoryId.toString() !== \"\";\n}\n\ntests[\"Response contains eligibilityDate \" + dataOut.eligibilityDate.toString()] = dataOut.eligibilityDate.toString() !== \"\";\n\n\nfunction validate(outService) {\n    \n    if( typeof(dataOut.provideAlternative) !== 'undefined' ) {\n        \n        if(\"No\" === dataOut.provideAlternative && outService.serviceSpecification.serviceCategoryId === \"internetService\") {\n            tests[\"Serivce qualification\"] = internetServiceQualification(outService.serviceCharacteristic, outService.serviceSpecification.serviceSpecificationCharacteristic);\n        }\n    }\n\n}\n\nfunction internetServiceQualification(inAttrs, outAttrs) {\n    \n    for(var i = 0; i < inAttrs.length; i++) {\n        for(var j = 0; j < outAttrs.length; j++) {\n            if(inAttrs[i].name == outAttrs[j].name) {\n                \n                // tests[\"inAttrs: \" + JSON.stringify(inAttrs[i])] = true;\n                // tests[\"outAttrs: \" + JSON.stringify(outAttrs[j])] = true;\n\n                retIn  = convertDataUnit(inAttrs[i].value);\n                retOut = convertDataUnit(outAttrs[j].valueto);\n                \n                // tests[\"retIn: \" + JSON.stringify(retIn)] = true;\n                // tests[\"retOut: \" + JSON.stringify(retOut)] = true;\n                \n                if(retIn.value <= retOut.value) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n \n}\n\nfunction convertDataUnit(dataStr) {\n    // tests[\"dataStr:\" + dataStr] = true;\n    var data = {};\n    data.unit = \"KBPS\";\n    \n    unit = dataStr.substr(-4, 4);\n    value = dataStr.substr(0, dataStr.length-4);\n    //tests[\"unit: \" + unit.toString() + \",value:\" + value.toString() + \",data:\" + dataStr.toString()] = true;\n    if(unit.substr(0,1) === \"K\") {\n        data.value = parseInt(value);\n    } else if(unit.substr(0,1) === \"M\") {\n        data.value = parseInt(value) * 1000;\n    } else if(unit.substr(0,1) === \"G\") {\n        data.value = parseInt(value) * 1000 * 1000;\n    }\n    return data;\n}\n\n\nfunction objectEquals(v1, v2) {\n\n    if (typeof(v1) !== typeof(v2)) {\n         console.log(\"property typeof(v1) !==typeof(v2)\" + typeof(v1)  + typeof(v2) + \"==>\" + v1 + \"!=\" + v2);\n        return false;\n    }\n\n    if (typeof(v1) === \"function\") {\n        return v1.toString() === v2.toString();\n    }\n\n    if (v1 instanceof Object && v2 instanceof Object) {\n       \n        var r = true;\n        for (var k in v1) {\n            r = objectEquals(v1[k], v2[k]);\n            \n            if (!r) {\n                 tests[\"property \" + k.toString() + \"==>\" + v1[k] + \"!=\" + v2[k]] = false;\n                 console.log(\"property \" + k.toString() + \"==>\" + v1[k] + \"!=\" + v2[k]);\n                 postman.setGlobalVariable(\"unequal\" +  k.toString(), v1[k] + \"!=\" + v2[k]);\n                \n                return false;\n            } else {\n                 //tests[\"property \" + k.toString() + \"==>\" + v1[k] + \"=\" + v2[k]] = true;\n            }\n        }\n        return true;\n    } else {\n        return v1 === v2;\n    }\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1467781810469,
			"name": "find specified service qualification requests - case 1",
			"description": "",
			"collectionId": "8e1c651a-2496-f1b9-a1f8-991de65f37d8",
			"responses": []
		},
		{
			"id": "bb91270e-ca48-3134-62e7-3465d3f68e82",
			"headers": "Content-Type: application/json\nAccept: application/json\n",
			"url": "{{serviceQualificationManagementApi}}/productOfferingQualification",
			"preRequestScript": "postman.setEnvironmentVariable(\"testName\",  \"tmf-product-offering-qualification-001\");",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "var dataOut = JSON.parse(responseBody);\n\ntests[\"Content-Type is present \" + postman.getResponseHeader(\"Content-type\")] = postman.getResponseHeader(\"Content-type\");\n\ntests[\"Status code is 201\"] = responseCode.code === 201;\n\ntests[\"Response contains ID \" + dataOut.id.toString()] = dataOut.id.toString() !== \"\";\n\ntests[\"Response contains HREF\" ] = dataOut.href.toString() !== \"\";\n\npostman.setGlobalVariable(\"ID4\", dataOut.id.toString());\n\npostman.setGlobalVariable(\"lastResponse\" + postman.getEnvironmentVariable(\"testName\"), dataOut);\npostman.setGlobalVariable(\"lastRequest\"+ postman.getEnvironmentVariable(\"testName\"), request.data );\n\nvar dataIn = JSON.parse(request.data);\n\n\nconsole.log(\"request \" + dataIn);\nconsole.log(\"request type\" + typeof(dataIn));\n\ntests[\"POST Body Response provideAlternative equals Request provideAlternative\"  ] = objectEquals(dataIn.provideOnlyAvailable, dataOut.provideOnlyAvailable);\ntests[\"POST Body Response provideOnlyEligible equals Request provideOnlyEligible\"  ] = objectEquals(dataIn.provideUnavailabilityReason, dataOut.provideUnavailabilityReason);\ntests[\"Response contains eligibilityDate \" + dataOut.eligibilityDate.toString()] = dataOut.eligibilityDate.toString() !== \"\";\ntests[\"Response contains qualificationState \" + dataOut.eligibilityDate.toString()] = dataOut.qualificationState.toString() !== \"\";\n\nif( typeof(dataOut.productOfferingQualificationItem) !== 'undefined' && dataOut.productOfferingQualificationItem.length > 0) {\n    var items = dataOut.productOfferingQualificationItem;\n    for(var i = 0; i < items.length; i++) {\n        tests[\"Response contains productOffering \"] = typeof(items[i].productOffering) !== 'undefined';\n        validateProductOffering(items[i].productOffering);\n    }\n}\n\nfunction validateProductOffering(productOffering) {\n    tests[\"productOffering contains id\"+ productOffering.id.toString()] = productOffering.id.toString() !== \"\";\n    tests[\"productOffering contains href\"+ productOffering.href.toString()] = productOffering.href.toString() !== \"\";\n    tests[\"productOffering contains category \"] = typeof(productOffering.productOfferingCategory) !== 'undefined';\n    tests[\"productOffering contains product \"] = typeof(productOffering.product) !== 'undefined';\n    validateProduct(productOffering.product);\n}\n\nfunction validateProduct(product) {\n    tests[\"product contains productSpecification \"] = typeof(product.productSpecification) !== 'undefined';   \n    tests[\"productSpecification contains id\"+ product.productSpecification.id.toString()] = product.productSpecification.id.toString() !== \"\";\n    tests[\"productSpecification contains version\"+ product.productSpecification.version.toString()] = product.productSpecification.version.toString() !== \"\";\n    tests[\"productSpecification contains name\"+ product.productSpecification.name.toString()] = product.productSpecification.name.toString() !== \"\";\n}\n\nfunction objectEquals(v1, v2) {\n\n    if (typeof(v1) !== typeof(v2)) {\n         console.log(\"property typeof(v1) !==typeof(v2)\" + typeof(v1)  + typeof(v2) + \"==>\" + v1 + \"!=\" + v2);\n        return false;\n    }\n\n    if (typeof(v1) === \"function\") {\n        return v1.toString() === v2.toString();\n    }\n\n    if (v1 instanceof Object && v2 instanceof Object) {\n       \n        var r = true;\n        for (var k in v1) {\n            r = objectEquals(v1[k], v2[k]);\n            \n            if (!r) {\n                 tests[\"property \" + k.toString() + \"==>\" + v1[k] + \"!=\" + v2[k]] = false;\n                 console.log(\"property \" + k.toString() + \"==>\" + v1[k] + \"!=\" + v2[k]);\n                 postman.setGlobalVariable(\"unequal\" +  k.toString(), v1[k] + \"!=\" + v2[k]);\n                \n                return false;\n            } else {\n                 //tests[\"property \" + k.toString() + \"==>\" + v1[k] + \"=\" + v2[k]] = true;\n            }\n        }\n        return true;\n    } else {\n        return v1 === v2;\n    }\n}\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1467781835844,
			"name": "create a product offering qualification request",
			"description": "",
			"collectionId": "8e1c651a-2496-f1b9-a1f8-991de65f37d8",
			"responses": [],
			"rawModeData": "{\n     \"provideOnlyAvailable\": \"No\",\n     \"provideUnavailabilityReason\": \"Yes\",\n     \"description\": \"exmple of a qualification task\",\n     \"channel\": \"web store\",\n     \"address\": {\n        \"href\" : \"https://www.google.ca/maps/dir/google+map+montreal+place+ville+marie\"\n     },\n     \"relatedParty\": [\n        {\n            \"href\": \"http://serverlocation:port/partyManagement/customer/345221\",\n            \"role\": \"customer\",\n            \"name\": \"John Doe\"\n        },\n        {\n            \"href\": \"http://serverlocation:port/partnerManagement/partner/4563\",\n            \"role\": \"csp\",\n            \"name\": \"x service provider\"\n        }\n     ],\n     \"productOfferingQualificationItem\": [\n         { \n             \"productOffering\": {\n                 \"productOfferingCategory\": {\n                     \"id\": \"TVservice with Internet Play\"\n                 }\n                 \n             }\n         }\n     ]\n}\n"
		},
		{
			"id": "d8ad8b38-cd79-fa86-d72f-dece365aae58",
			"headers": "Content-Type: application/json\nAccept: application/json\n",
			"url": "{{serviceQualificationManagementApi}}/serviceQualification",
			"preRequestScript": "postman.setEnvironmentVariable(\"testName\",  \"tmf-service-qualification-003\");",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "var dataOut = JSON.parse(responseBody);\n\ntests[\"Content-Type is present \" + postman.getResponseHeader(\"Content-type\")] = postman.getResponseHeader(\"Content-type\");\n\ntests[\"Status code is 201\"] = responseCode.code === 201;\n\ntests[\"Response contains ID \" + dataOut.id.toString()] = dataOut.id.toString() !== \"\";\n\ntests[\"Response contains HREF\" ] = dataOut.href.toString() !== \"\";\n\npostman.setGlobalVariable(\"ID3\", dataOut.id.toString());\n\npostman.setGlobalVariable(\"lastResponse\" + postman.getEnvironmentVariable(\"testName\"), dataOut);\npostman.setGlobalVariable(\"lastRequest\"+ postman.getEnvironmentVariable(\"testName\"), request.data );\n\nvar dataIn = JSON.parse(request.data);\n\n\nconsole.log(\"request \" + dataIn);\nconsole.log(\"request type\" + typeof(dataIn));\n\nif( typeof(dataOut.serviceQualificationItem) !== 'undefined' && dataOut.serviceQualificationItem.length > 0) {\n    var items = dataOut.serviceQualificationItem;\n    for(var i = 0; i < items.length; i++) {\n        tests[\"Response contains service \"] = typeof(items[i].service) !== 'undefined';\n        validateService(items[i].service);\n        \n        tests[\"Response serviceQualificationItem contains availability\"+ items[i].availability.toString()] = items[i].availability.toString() !== \"\";\n        tests[\"Response serviceQualificationItem contains serviceabilityDate \"+ items[i].serviceabilityDate.toString()] = items[i].serviceabilityDate.toString() !== \"\";\n        validate(dataIn.serviceQualificationItem[0].service, items[i].service);\n    }\n}\n\nfunction validateService(service) {\n    if(\"No\" === dataIn.provideAlternative) {\n        tests[\"Response service contains serviceCharacteristic \"] = typeof(service.serviceCharacteristic) !== 'undefined';\n        validateServiceCharacteristic(service.serviceCharacteristic);\n    }\n    \n    tests[\"Response service contains serviceSpecification \"] = typeof(service.serviceSpecification) !== 'undefined';\n    validateServiceSpecification(service.serviceSpecification);\n    \n  \n}\n\nfunction validateServiceCharacteristic(serviceCharacteristic) {\n    for(var i = 0; i < serviceCharacteristic.length; i++ ) {\n        tests[\"Response serviceCharacteristic contains name \"+ serviceCharacteristic[i].name] = true;\n        tests[\"Response serviceCharacteristic contains value \"+ serviceCharacteristic[i].value] = true;\n    }\n   \n}\n\nfunction validateServiceSpecification(serviceSpecification) {\n    tests[\"Response serviceSpecification contains id \"+ serviceSpecification.id.toString()] =serviceSpecification.id.toString() !== \"\";\n    tests[\"Response serviceSpecification contains href \"+ serviceSpecification.href.toString()] = serviceSpecification.href.toString() !== \"\";\n    tests[\"Response serviceSpecification contains serviceCategoryId \"+ serviceSpecification.serviceCategoryId.toString()] = serviceSpecification.serviceCategoryId.toString() !== \"\";\n}\n\n\ntests[\"POST Body Response provideAlternative equals Request provideAlternative\"  ] = objectEquals(dataIn.provideAlternative, dataOut.provideAlternative);\ntests[\"POST Body Response provideOnlyEligible equals Request provideOnlyEligible\"  ] = objectEquals(dataIn.provideOnlyEligible, dataOut.provideOnlyEligible);\ntests[\"POST Body Response Address equals Request Address\"  ] = objectEquals(dataIn.address, dataOut.address);\ntests[\"Response contains eligibilityDate \" + dataOut.eligibilityDate.toString()] = dataOut.eligibilityDate.toString() !== \"\";\n\n\nfunction validate(inService, outService) {\n        \n    tests[\"POST Body Response serviceSpecification equals Request serviceSpecification\"  ] = objectEquals(inService.serviceCharacteristic, outService.serviceCharacteristic);\n    \n    if( typeof(dataIn.provideAlternative && inService.serviceSpecification) !== 'undefined' ) {\n        tests[\"POST Body Response serviceSpecification equals Request serviceSpecification\"  ] = objectEquals(inService.serviceSpecification, outService.serviceSpecification);\n        \n        if(\"No\" === dataIn.provideAlternative && inService.serviceSpecification.serviceCategoryId === \"internetService\") {\n            tests[\"Serivce qualification\"] = internetServiceQualification(inService.serviceCharacteristic, outService.serviceSpecification.serviceSpecificationCharacteristic);\n        }\n    }\n\n}\n\nfunction internetServiceQualification(inAttrs, outAttrs) {\n    // tests[\"inAttrs: \" + JSON.stringify(inAttrs)] = true;\n    \n    // tests[\" outAttrs: \" + JSON.stringify(outAttrs) ] = true;\n    \n    // tests[\"dataIn.provideAlternative: \" + dataIn.provideAlternative] = true;\n    \n    if( dataIn.provideAlternative === \"No\") {\n        \n        for(var i = 0; i < inAttrs.length; i++) {\n            for(var j = 0; j < outAttrs.length; j++) {\n                if(inAttrs[i].name == outAttrs[j].name) {\n                    \n                    // tests[\"inAttrs: \" + JSON.stringify(inAttrs[i])] = true;\n                    // tests[\"outAttrs: \" + JSON.stringify(outAttrs[j])] = true;\n\n                    retIn  = convertDataUnit(inAttrs[i].value);\n                    retOut = convertDataUnit(outAttrs[j].valueto);\n                    \n                    // tests[\"retIn: \" + JSON.stringify(retIn)] = true;\n                    // tests[\"retOut: \" + JSON.stringify(retOut)] = true;\n                    \n                    if(retIn.value <= retOut.value) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n    return true;\n}\n\nfunction convertDataUnit(dataStr) {\n    // tests[\"dataStr:\" + dataStr] = true;\n    var data = {};\n    data.unit = \"KBPS\";\n    \n    unit = dataStr.substr(-4, 4);\n    value = dataStr.substr(0, dataStr.length-4);\n    //tests[\"unit: \" + unit.toString() + \",value:\" + value.toString() + \",data:\" + dataStr.toString()] = true;\n    if(unit.substr(0,1) === \"K\") {\n        data.value = parseInt(value);\n    } else if(unit.substr(0,1) === \"M\") {\n        data.value = parseInt(value) * 1000;\n    } else if(unit.substr(0,1) === \"G\") {\n        data.value = parseInt(value) * 1000 * 1000;\n    }\n    return data;\n}\n\n\nfunction objectEquals(v1, v2) {\n\n    if (typeof(v1) !== typeof(v2)) {\n         console.log(\"property typeof(v1) !==typeof(v2)\" + typeof(v1)  + typeof(v2) + \"==>\" + v1 + \"!=\" + v2);\n        return false;\n    }\n\n    if (typeof(v1) === \"function\") {\n        return v1.toString() === v2.toString();\n    }\n\n    if (v1 instanceof Object && v2 instanceof Object) {\n       \n        var r = true;\n        for (var k in v1) {\n            r = objectEquals(v1[k], v2[k]);\n            \n            if (!r) {\n                 tests[\"property \" + k.toString() + \"==>\" + v1[k] + \"!=\" + v2[k]] = false;\n                 console.log(\"property \" + k.toString() + \"==>\" + v1[k] + \"!=\" + v2[k]);\n                 postman.setGlobalVariable(\"unequal\" +  k.toString(), v1[k] + \"!=\" + v2[k]);\n                \n                return false;\n            } else {\n                 //tests[\"property \" + k.toString() + \"==>\" + v1[k] + \"=\" + v2[k]] = true;\n            }\n        }\n        return true;\n    } else {\n        return v1 === v2;\n    }\n}\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1467782168734,
			"name": "create a service qualification request - case 3",
			"description": "can the specific service be provided at a specific location (asking for specific characteristrics but not specific service type (no specification isprovided DSL or Fiber)",
			"collectionId": "8e1c651a-2496-f1b9-a1f8-991de65f37d8",
			"responses": [],
			"rawModeData": "{\n    \"address\" : \n    {\n         \"href\" : \"https://www.google.ca/maps/dir/google+map+montreal+place+ville+marie\"\n     },\n     \"provideAlternative\" : \"No\",\n     \"provideOnlyEligible\" : \"Yes\",\n     \"description\" : \"example of a qualification task\",\n     \"serviceQualificationItem\" : \n     [\n        {\n            \"service\" : {\n                \"serviceCharacteristic\" : [{\n                    \"name\" : \"upstreamSpeed\",\n                    \"value\" : \"1MBPS\"\n                },\n                {\n                    \"name\" : \"downstreamSpeed\",\n                    \"value\" : \"100MBPS\"\n                }]\n            }\n        }\n     ]\n}\n"
		}
	]
}